<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Computer Graphics - Tag - Ryan's Blog</title><link>https://zhihaoruan.xyz/tags/computer-graphics/</link><description>Computer Graphics - Tag - Ryan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>shineyruan@gmail.com (Zhihao Ruan)</managingEditor><webMaster>shineyruan@gmail.com (Zhihao Ruan)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 27 Dec 2021 02:41:46 +0000</lastBuildDate><atom:link href="https://zhihaoruan.xyz/tags/computer-graphics/" rel="self" type="application/rss+xml"/><item><title>Volume Rendered ReSTIR in Vulkan</title><link>https://zhihaoruan.xyz/565-final-project/</link><pubDate>Mon, 27 Dec 2021 02:41:46 +0000</pubDate><author>Zhihao Ruan</author><guid>https://zhihaoruan.xyz/565-final-project/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/posts/565-final-project/bunny.png" referrerpolicy="no-referrer">
&lt;/div>This is a project of a Vulkan implementation of Fast Volume Rendering with Spatiotemporal Reservoir Resampling. It achieves the following:
Vulkan ray tracing pipeline with nvpro and Vulkan Ray Tracing KHR extension. Volume assets loading and rendering through OpenVDB. ReSTIR algorithm rendering on GLTF scene and volume assets. Authors Zhihao Ruan (ruanzh@seas.upenn.edu), Shubham Sharma (sshubh@seas.upenn.edu), Raymond Yang (rayyang@seas.upenn.edu) Tested on: Windows 10 Home 21H1 Build 19043.1288, Ryzen 7 3700X @ 3.</description></item><item><title>Vulkan Grass Rendering</title><link>https://zhihaoruan.xyz/565-vulkan-grass-rendering/</link><pubDate>Mon, 27 Dec 2021 00:54:07 +0000</pubDate><author>Zhihao Ruan</author><guid>https://zhihaoruan.xyz/565-vulkan-grass-rendering/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/posts/565-vulkan-grass-rendering/blade_upstraight.png" referrerpolicy="no-referrer">
            </div>Tested on: Windows 10 Home 21H1 Build 19043.1288, Ryzen 7 3700X @ 3.59GHz 48GB, RTX 2060 Super 8GB Highlights This project implements physically-based grass rendering &amp; culling with Vulkan compute shaders:
Physically-based real-time rendering of grass blades; 3 different culling tests: orientation culling, view-frustum culling, distance culling; Tessellating Bezier curves into grass blades with GLSL tessellation shader Vulkan Vulkan is considered as the next-generation graphics API developed by Khronos group, in replacement for the old OpenGL.]]></description></item><item><title>CUDA Path Tracer with Ã€-Trous Denoiser</title><link>https://zhihaoruan.xyz/565-cuda-path-tracer/</link><pubDate>Mon, 27 Dec 2021 00:43:29 +0000</pubDate><author>Zhihao Ruan</author><guid>https://zhihaoruan.xyz/565-cuda-path-tracer/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/posts/565-cuda-path-tracer/cornell.2021-10-09_18-44-15z.5000samp.png" referrerpolicy="no-referrer">
            </div>Tested on: Ubuntu 20.04 LTS, Ryzen 3700X @ 2.22GHz 48GB, RTX 2060 Super @ 7976MB CUDA Path Tracer Highlights Finished path tracing core features:
diffuse shaders perfect specular reflection 1st-bounce ray intersection caching radix sort by material type path continuation/termination by Thrust stream compaction Finished Advanced Features:
Refraction with Fresnel effects using Schlick&rsquo;s approximation Stochastic sampled anti-aliasing Physically-based depth of field OBJ mesh loading with tinyobjloader Background: Ray Tracing Ray tracing is a technique commonly used in rendering.]]></description></item><item><title>Minecraft Game Programming</title><link>https://zhihaoruan.xyz/560proj/</link><pubDate>Wed, 09 Dec 2020 18:30:11 -0400</pubDate><author>Zhihao Ruan</author><guid>https://zhihaoruan.xyz/560proj/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/posts/560Proj/560-screenshot.png" referrerpolicy="no-referrer">
            </div>In the fall of 2020, I finally had a chance to explore the field of computer graphics at University of Pennsylvania, and did a very interesting course project which builds a simplified Minecraft from scratch. This game is built on OpenGL 3.2 with Qt 5.15.0. Through building this game, I learned a lot about OpenGL rendering pipeline, game engine &amp; texture mapping.
Demo Video Overview Minecraft is originally well-known for its block-like structure.]]></description></item></channel></rss>